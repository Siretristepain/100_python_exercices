#_____________________________
# Exercice 66 : √©crire dans un fichier


# def ecrireFichier(nomFichier, texte):
#     with open(nomFichier, 'w') as f:
#         f.write(texte)
    
#     return

# if __name__ == '__main__':
#     ecrireFichier('fichier_test_ex66', "Ceci est un test pour voir si ma solution fonctionne.")


#_____________________________
# Exercice 67 : la cl√© avec le nombre de valeurs uniques maximales

# l = [1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9]
# def cleMaxValeurDict(d):
#     for cle in d:
#         for i in d[cle]:
#             nbr = d[cle].count(i)
#             if nbr > 1:
#                 for j in range(nbr-1):
#                     d[cle].remove(i)
    
#     return print(max(d, key=lambda x: len(d[x])))

# if __name__ == '__main__':
#     cleMaxValeurDict({"a":[9,10,9,7,3,1], "b":[5,3,2,2,2], "c":[1,1,1,1,1,1,8,2]})
#     cleMaxValeurDict({"dtg":[6,8,1], "fgb":[2.5,"a"], "klm":["p",3,3]}) 

# d = {'mathilde':[25,12,2],
#      'raphael':[24],
#      'lou':[17,14],
#      'barbara':[23],
#      'esteban':[7,20,14,9]}

# print(max(d, key=lambda x: len(d[x])))


#_____________________________
# Exercice 68 : demander une liste √† l'utilisateur

""" 
Dans ma premi√®re m√©thode : liste_utilisateur(),
Pylance l√®ve une erreur de syntaxe sur "liste_utilisateur[i]" (avant le signe =, dans la boucle for).
Cela est du au fait que initialement, liste_utilisateur est une str et non pas une liste.
Or Pylance analyse le code de fa√ßon statique et ne comprends donc pas, mais le code fonctionne bien.
√Ä creuser.

Explications :

On peut utiliser les crochets sur des str pour acc√©der √† un caract√®re MAIS, en Python,
une str est immutable, ce qui signifie que l'on ne peut pas modifier un caract√®re dans une cha√Æne existante.

√Ä l'inverse, les list sont des objets mutables, c'est √† fire que l'on peut modifier ses √©l√©ments avec
une assignation comme : liste[i] = valeur.

>>>
phrase = "bonjour"
print(phrase[2])

phrase[2] = 'o'
print(phrase)
>>>

Le code ci-dessus donne :

'n'
    phrase[2] = 'o'
TypeError: 'str' object does not support item assignment

--> on voit bien que les crochets fonctionnent pour acc√©der √† un √©l√©ment de la str mais ne permettent pas l'assignation.

C'est exactement la m√™me chose dans ma m√©thode liste_utilisateur.
Initialement c'est une str, mais en lui appliquant la m√©thode split(), elle devient une liste, mais Pylance ne le voit pas.
C'est pour √ßa que le code fonctionne alors que Pylance nous souligne une erreur.

Ce que je ne comprends pas, c'est pourquoi en faisant :
def liste_utilisateur():
    chaine = input("Saisir une liste d'entier : ")
    chaine = chaine.strip('[]')
    liste = chaine.split(',')
    for i in range(len(liste)):
        liste[i] = int(liste[i])
    return liste

L'erreur persisite malgr√© le changement de variable.

Explications ChatGPT (√ßa vaut ce que √ßa vaut) :

‚ö†Ô∏è Pourquoi Pylance signale encore une erreur m√™me apr√®s avoir chang√© le nom de la variable ?
En fait, ce n‚Äôest pas uniquement une question de nom, c‚Äôest une question de type d√©duit par Pylance √† un instant donn√© dans le code.

Prenons √ßa ligne par ligne dans ce code :

python
Copier
Modifier
chaine = input("Saisir une liste d'entier : ")
chaine = chaine.strip('[]')
liste = chaine.split(',')  # ‚Üê Ici, Pylance comprend : "liste est une list[str]"
for i in range(len(liste)):
    liste[i] = int(liste[i])  # ‚Üê üî¥ Probl√®me ici pour Pylance !
Ce que fait Pylance :

√Ä la ligne liste = chaine.split(','), il d√©duit que liste est de type list[str].

√Ä la ligne suivante, tu fais une modification "in-place" du contenu avec liste[i] = int(...).

Et l√†, Pylance est en panique parce que :

Il a vu que liste √©tait une list[str],

Tu lui dis maintenant que ce sera une list[int] apr√®s modification,

Donc, il signale une incoh√©rence de type entre avant et apr√®s.

üëâ C‚Äôest une limitation de l‚Äôanalyse de type "na√Øve" : Pylance ne suit pas les mutations internes aussi bien que Python √† l‚Äôex√©cution.
"""

# def liste_utilisateur():
#     # Demander la liste d'entier √† l'utilisateur
#     liste_utilisateur = input("Saisir une liste d'entier : ")

#     # On enl√®ve les crochets au d√©but et √† la fin de la liste (s'il y en a. Pas d'erreur avec lstrip/rstrip s'il y en a pas).
#     liste_utilisateur = liste_utilisateur.lstrip('[')
#     liste_utilisateur = liste_utilisateur.rstrip(']')

#     # On s√©pare les entiers par les virgules
#     tes = liste_utilisateur.split(sep=',')

#     # On passe chaque entier en type integer car ils sont en str pour l'instant
#     for i in range(len(tes)):
#         tes[i] = int(tes[i])


#     return liste_utilisateur



# def liste_utilisateur_bis():
#     # Demander la liste d'entier √† l'utilisateur
#     saisie = input("Saisir une liste d'entiers (ex: 1, 2, 3) : ")

#     # Nettoyer la saisie et la convertir en liste d'entiers
#     saisie = saisie.strip('[]')
#     liste = [int(x.strip()) for x in saisie.split(',') if x.strip() != '']

#     return liste


#_____________________________
# Exercice 69 : nombre de jours et d'heures
# import logging

# logging.basicConfig(level=logging.INFO)

# def nbrJourHeure(dateDebut, dateFin):
#     """
#     M√©thodologie :
#     Axiome : partons du principe que la date de debut est toujours ant√©rieure √† la date de fin.

#     - si les ann√©es sont identiques sur les 2 dates, alors c'est assez simple car soit :
#         - le mois de la date de fin est sup√©rieure √† la date de d√©but et on peut facilement calculer le delta
#         - soit les mois sont identitiques mais alors le jour de la date de fin est sup√©rieur √† la date de d√©but et on peut facilement calculer le delta
    
#     - si les ann√©es sont diff√©rentes sur les 2 dates, c'est plus compliqu√© car alors le mois de la 2√®me date peut √™tre ant√©rieur √† celui de la premi√®re.
#         - on se place au 1er janvier de l'ann√©e de la date de fin.
#         - on calcul l'√©cart entre le 1er janvier et la date de fin.
#         - on fait la diff√©rence entre ann√©e de la date de fin et ann√©e de la date de d√©but (deltaAnnee).
#         - le nombre d'ann√©es COMPLETES entre date de d√©but et date de fin corresponds √† daltaAnnee - 1.
#         - ensuite on se place au 31 d√©cembre de l'ann√©e de la date de d√©but et on calcule le delta avec la date de d√©but.
#     """

#     DAYS_PER_MONTH = [31,28,31,30,31,30,31,31,30,31,30,31]

#     # On convertis nos dates en listes, format : [YYYY, MM, JJ]
#     debut = [int(i) for i in dateDebut.split('/')]
#     fin = [int(i) for i in dateFin.split('/')]

#     nb_jour = 0

#     delta_years = fin[0] - debut[0]

#     # Cas o√π il y plus d'un an d'√©cart
#     if delta_years > 1:
#         logging.debug(f"--> Il y a des ann√©es compl√®tes entre les 2 dates")

#         # On ajoute les jours des ann√©es compl√®tes d'√©cart
#         nb_jour += sum(DAYS_PER_MONTH) * (delta_years - 1)
#         logging.debug("_________________________________________________________________")
#         logging.debug(f"Nombre d'ann√©es compl√®tes d'√©cart : {delta_years - 1}")
#         logging.debug(f"Nombre de jours ajout√©s : {sum(DAYS_PER_MONTH) * (delta_years - 1)}")
#         logging.debug("_________________________________________________________________")

#         # On ajoute les jours des mois complets restant de l'ann√©e de d√©but
#         nb_jour += sum(DAYS_PER_MONTH[debut[1]:])
#         logging.debug(f"Mois de l'ann√©e de la date de d√©but : {debut[1]}")
#         logging.debug(f"Nombre de mois complets : {12 - 1}")
#         logging.debug(f"Nombre de jours ajout√©s : {sum(DAYS_PER_MONTH[debut[1]:])} ")
#         logging.debug("_________________________________________________________________")

#         # On ajoute les jours restants du mois en cours (on r√©cup√®re le nombre de jour du mois en cours auxquels on soustraits le jour de la date) de la date de d√©but
#         nb_jour += DAYS_PER_MONTH[debut[1] - 1] - debut[2]
#         logging.debug(f"Jour de la date de d√©but : {debut[2]}")
#         logging.debug(f"Nombre de jours ajout√©s : {DAYS_PER_MONTH[debut[1] - 1] - debut[2]}")
#         logging.debug("_________________________________________________________________")

#         # On ajoute les jours des mois complets fait de l'ann√©e de fin
#         nb_jour += sum(DAYS_PER_MONTH[:fin[1] - 1])
#         logging.debug(f"Mois de la date de fin : {fin[1]}")
#         logging.debug(f"Nombre de mois termin√©s l'ann√©e de fin : {fin[1] - 1}")
#         logging.debug(f"Nombre de jours ajout√©s : {sum(DAYS_PER_MONTH[:fin[1] - 1])}")
#         logging.debug("_________________________________________________________________")

#         # On ajoute les jours faits du mois en cours de la date de fin
#         nb_jour += fin[2]
#         logging.debug(f"Jour de la date de fin : {fin[2]}")
#         logging.debug(f"Nombre de jours ajout√©s : {fin[2]}")
#         logging.debug("_________________________________________________________________")

#         print(nb_jour)

#     # Cas o√π il y a moins d'un an d'√©cart
#     elif delta_years == 1:
#         logging.debug(f"--> Il y a moins d'une ann√©e compl√®te entre les 2 dates mais elles ont 2 ann√©es diff√©rentes")
#         # On ajoute les jours des mois complets restant de l'ann√©e de d√©but
#         nb_jour += sum(DAYS_PER_MONTH[debut[1]:])
#         logging.debug(f"Mois de l'ann√©e de la date de d√©but : {debut[1]}")
#         logging.debug(f"Nombre de mois complets : {12 - 1}")
#         logging.debug(f"Nombre de jours ajout√©s : {sum(DAYS_PER_MONTH[debut[1]:])} ")
#         logging.debug("_________________________________________________________________")

#         # On ajoute les jours restants du mois en cours (on r√©cup√®re le nombre de jour du mois en cours auxquels on soustraits le jour de la date) de la date de d√©but
#         nb_jour += DAYS_PER_MONTH[debut[1] - 1] - debut[2]
#         logging.debug(f"Jour de la date de d√©but : {debut[2]}")
#         logging.debug(f"Nombre de jours ajout√©s : {DAYS_PER_MONTH[debut[1] - 1] - debut[2]}")
#         logging.debug("_________________________________________________________________")

#         # On ajoute les jours des mois complets fait de l'ann√©e de fin
#         nb_jour += sum(DAYS_PER_MONTH[:fin[1] - 1])
#         logging.debug(f"Mois de la date de fin : {fin[1]}")
#         logging.debug(f"Nombre de mois termin√©s l'ann√©e de fin : {fin[1] - 1}")
#         logging.debug(f"Nombre de jours ajout√©s : {sum(DAYS_PER_MONTH[:fin[1] - 1])}")
#         logging.debug("_________________________________________________________________")

#         # On ajoute les jours faits du mois en cours de la date de fin
#         nb_jour += fin[2]
#         logging.debug(f"Jour de la date de fin : {fin[2]}")
#         logging.debug(f"Nombre de jours ajout√©s : {fin[2]}")
#         logging.debug("_________________________________________________________________")

#         print(nb_jour)

#     # Cas o√π les 2 dates sont la m√™me ann√©e
#     elif delta_years == 0:
#         logging.debug(f"--> Les 2 dates sont la m√™me ann√©e")
#         delta_month = fin[1] - debut[1]

#         # Cas o√π il y a plus d'un mois complet d'√©cart
#         if delta_month > 1:
#             logging.debug("Il y a des mois entiers d'√©cart entre les 2 dates")

#             # On ajoute les jours restant du mois de d√©but + les jours fais du mois de fin
#             nb_jour += (DAYS_PER_MONTH[debut[1] - 1] - debut[2]) + fin[2]
#             logging.debug(f"Jour de debut : {debut[2]} et mois de debut : {debut[1]}")
#             logging.debug(f"Jour de fin : {fin[2]}")
#             logging.debug(f"Nombre de jours ajout√©s : {(DAYS_PER_MONTH[debut[1] - 1] - debut[2]) + fin[2]}")
#             logging.debug("_________________________________________________________________")

#             # On ajoute tous les jours des mois complets faits entre les 2 mois de d√©but et de fin
#             nb_jour += sum(DAYS_PER_MONTH[debut[1]:fin[1] - 1])
#             logging.debug(f"Mois de d√©part : {debut[1]}")
#             logging.debug(f"Mois de fin : {fin[1]}")
#             logging.debug(f"Nombre de mois entier d'√©cart : {len(DAYS_PER_MONTH[debut[1]:fin[1] - 1])}")
#             logging.debug("_________________________________________________________________")

#             print(nb_jour)

#         elif delta_month == 1:
#             logging.debug(f"Les 2 dates sont sur des mois cons√©cutifs (donc moins d'un mois d'√©cart mais pas le m√™me mois quand m√™me)")
#             # On ajoute les jours qui reste √† faire entre la date de d√©but et la fin du moi + les jours d√©j√† faits du mois de la date de fin
#             nb_jour += (DAYS_PER_MONTH[debut[1] - 1] - debut[2]) + fin[2]

#             logging.debug(f"Jour de debut : {debut[2]} et mois de debut : {debut[1]}")
#             logging.debug(f"Jour de fin : {fin[2]}")
#             logging.debug(f"Nombre de jours ajout√©s : {(DAYS_PER_MONTH[debut[1] - 1] - debut[2]) + fin[2]}")
#             logging.debug("_________________________________________________________________")

#             print(nb_jour)

#         elif delta_month == 0:
#             logging.debug("Les 2 dates sont le m√™me mois")

#             nb_jour += fin[2] - debut[2]
#             logging.debug(f"Jour du d√©but : {debut[2]}")
#             logging.debug(f"Jour de fin : {fin[2]}")
#             logging.debug(f"Nombres de jours ajout√©s : {fin[2] - debut[2]}")
#             logging.debug("_________________________________________________________________")

#             print(nb_jour)



#         else:
#             raise ValueError("Les dates renseign√©es ne sont pas correctes. Les deux dates ont la m√™me ann√©e mais le mois de la date de fin est ant√©rieur √† celui de la date de d√©but.")

#     else:
#         raise ValueError("Les dates renseign√©es ne sont pas correctes. L'ann√©e de fin doit √™tre sup√©rieure √† l'ann√©e de d√©but.")

#     print(f"*** R√©sultats ***")
#     return print((nb_jour, nb_jour*24))

#_____________________________
# Exercice 70 : G√©n√©rer al√©atoirement un mot de passe

import random

def genererMDP(caracteres, taillemdp):
    """M√©thode qui g√©n√®re un mot de passe de longueur 'taillemdp' avec uniquement des caract√®res contenus dans 'caracteres'.

    Fonctionnement :
    L'id√©e est de s√©l√©ctionner un caract√®re al√©atoire dans la str des caract√®res autoris√©s via le module random, autant de fois que taillemdp.
    J'ai choisis de faire une liste en compr√©hension mais il aurait √©t√© possible (et plus lisible) de faire une boucle for.

    Args:
        caracteres (str): tous les caract√®res autoris√©s dans le mot de passe.
        taillemdp (int): longueur souhait√©e pour le mot de passe.

    Returns:
        str : Le mot de passe.
    """

    mdp = [caracteres[random.randint(0, len(caracteres)-1)] for i in range(taillemdp)]
    return print(''.join(mdp))


if __name__ == '__main__':
    # Ex69
    # nbrJourHeure(dateDebut="2020/01/01", dateFin="2025/01/01")
    # nbrJourHeure(dateDebut="2022/10/10", dateFin="2025/05/07")
    # nbrJourHeure(dateDebut="2024/10/01", dateFin="2025/05/05")
    # nbrJourHeure(dateDebut="2025/10/01", dateFin="2025/10/10")
    # nbrJourHeure(dateDebut="2025/03/10", dateFin="2025/04/09")
    # nbrJourHeure(dateDebut="2025/10/01", dateFin="2025/10/10")
    # nbrJourHeure(dateDebut="2024/03/08", dateFin="2024/09/10")

    # Ex70
    genererMDP("abc/#123456789",10)
